services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    networks:
      - app_network


  auth_service:
    build:
      context: ./back/auth_service
    container_name: auth-service
    env_file: '.env'
    ports:
      - '8000:8000'
    volumes:
      - ./back/auth_service:/app
    networks:
      - app_network
    depends_on:
      redis:
        condition: service_started
      auth_db:
        condition: service_healthy

  auth_db:
    image: postgres:13
    container_name: auth_db
    environment:
      POSTGRES_DB: $DB_AUTH_NAME
      POSTGRES_USER: $DB_AUTH_USER
      POSTGRES_PASSWORD: $DB_AUTH_PASSWORD
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  
  user_service:
    build:
      context: ./back/user_service
    container_name: user-service
    env_file: '.env'
    volumes:
      - ./back/user_service:/app
      - media:/app/media
    ports:
      - '8001:8000'
    networks:
      - app_network
    depends_on:
      redis:
        condition: service_started
      user_db:
        condition: service_healthy

  user_db:
    image: postgres:13
    container_name: user_db
    environment:
      POSTGRES_DB: $DB_USER_NAME
      POSTGRES_USER: $DB_USER_USER
      POSTGRES_PASSWORD: $DB_USER_PASSWORD
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  game_service:
    build:
      context: ./back/game_service
    container_name: game-service
    env_file: '.env'
    volumes:
      - ./back/game_service:/app
      - media:/app/media
    ports:
      - '8002:8000'
    networks:
      - app_network
    depends_on:
      redis:
        condition: service_started
      game_db:
        condition: service_healthy

  game_db:
    image: postgres:13
    container_name: game_db
    environment:
      POSTGRES_DB: $DB_GAME_NAME
      POSTGRES_USER: $DB_GAME_USER
      POSTGRES_PASSWORD: $DB_GAME_PASSWORD
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5



  friend_service:
    build:
      context: ./back/friend_service
    container_name: friend-service
    env_file: '.env'
    ports:
      - '8003:8000'
    volumes:
      - ./back/friend_service:/app
    networks:
      - app_network
    depends_on:
      redis:
        condition: service_started
      friend_db:
        condition: service_healthy

  friend_db:
    image: postgres:13
    container_name: friend_db
    environment:
      POSTGRES_DB: $DB_FRIENDS_NAME
      POSTGRES_USER: $DB_FRIENDS_USER
      POSTGRES_PASSWORD: $DB_FRIENDS_PASSWORD
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5


  mail_service:
    build:
      context: ./back/mail_service
    container_name: mail-service
    env_file: '.env'
    ports:
      - '8004:8000'
    volumes:
      - ./back/mail_service:/app
    networks:
      - app_network
    depends_on:
      redis:
        condition: service_started

  notification_service:
    build:
      context: ./back/notification_service
    container_name: notification-service
    env_file: '.env'
    ports:
      - '8005:8000'
    volumes:
      - ./back/notification_service:/app
    networks:
      - app_network
    depends_on:
      redis:
        condition: service_started


  chat_service:
    build:
      context: ./back/chat_service
    container_name: chat-service
    env_file: '.env'
    ports:
      - '8006:8000'
    volumes:
      - ./back/chat_service:/app
    networks:
      - app_network
    depends_on:
      redis:
        condition: service_started
      chat_db:
        condition: service_healthy

  chat_db:
    image: postgres:13
    container_name: chat_db
    environment:
      POSTGRES_DB: $DB_CHAT_NAME
      POSTGRES_USER: $DB_CHAT_USER
      POSTGRES_PASSWORD: $DB_CHAT_PASSWORD
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: ./nginx
      args:
        HOSTNAME: $HOSTNAME
    container_name: nginx
    environment:
      HOSTNAME: $HOSTNAME
    volumes:
      - ./front:/app
      - media:/usr/share/nginx/media
    ports:
      - '3000:80'
      - '5000:443'
    networks:
      - app_network
    depends_on:
      - chat_service
      - mail_service
      - user_service
      - notification_service


  front:
    build:
      context: ./front
    container_name: front
    networks:
      - app_network
    volumes:
      - ./front:/app



networks:
  app_network:
    driver: bridge

volumes:
  media: